/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, Addr, InstantiateMsg, Coin, ChannelTokenDetails, ChannelsCollectionDetails, ReservedUsername, ExecuteMsg, AssetSource, Binary, Flag, Role, Decimal, AssetMetadata, ChannelCollaborator, QueryMsg, AssetResponse, Asset, FlagInfo, ArrayOfAssetResponse, ChannelResponse, CollaboratorInfo, ChannelDetails, String, ChannelMetadata, ArrayOfChannelResponse, ChannelConractConfig, AuthDetails, ArrayOfString, Uint64, ArrayOfCollaboratorInfo, Boolean, Playlist, ArrayOfPlaylist, ArrayOfReservedUsername } from "./OmniFlixChannel.types";
export interface OmniFlixChannelReadOnlyInterface {
  contractAddress: string;
  isPaused: () => Promise<Boolean>;
  pausers: () => Promise<ArrayOfString>;
  channelDetails: ({
    channelId
  }: {
    channelId: string;
  }) => Promise<ChannelDetails>;
  channelMetadata: ({
    channelId
  }: {
    channelId: string;
  }) => Promise<ChannelMetadata>;
  channel: ({
    channelId
  }: {
    channelId: string;
  }) => Promise<ChannelResponse>;
  channels: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfChannelResponse>;
  channelId: ({
    userName
  }: {
    userName: string;
  }) => Promise<String>;
  playlist: ({
    channelId,
    playlistId
  }: {
    channelId: string;
    playlistId: string;
  }) => Promise<Playlist>;
  playlists: ({
    channelId,
    limit,
    startAfter
  }: {
    channelId: string;
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfPlaylist>;
  config: () => Promise<ChannelConractConfig>;
  assets: ({
    channelId,
    limit,
    startAfter
  }: {
    channelId: string;
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfAssetResponse>;
  asset: ({
    channelId,
    publishId
  }: {
    channelId: string;
    publishId: string;
  }) => Promise<AssetResponse>;
  reservedUsernames: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfReservedUsername>;
  getChannelCollaborator: ({
    channelId,
    collaboratorAddress
  }: {
    channelId: string;
    collaboratorAddress: Addr;
  }) => Promise<CollaboratorInfo>;
  getChannelCollaborators: ({
    channelId,
    limit,
    startAfter
  }: {
    channelId: string;
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfCollaboratorInfo>;
  followersCount: ({
    channelId
  }: {
    channelId: string;
  }) => Promise<Uint64>;
  followers: ({
    channelId,
    limit,
    startAfter
  }: {
    channelId: string;
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfString>;
}
export class OmniFlixChannelQueryClient implements OmniFlixChannelReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.isPaused = this.isPaused.bind(this);
    this.pausers = this.pausers.bind(this);
    this.channelDetails = this.channelDetails.bind(this);
    this.channelMetadata = this.channelMetadata.bind(this);
    this.channel = this.channel.bind(this);
    this.channels = this.channels.bind(this);
    this.channelId = this.channelId.bind(this);
    this.playlist = this.playlist.bind(this);
    this.playlists = this.playlists.bind(this);
    this.config = this.config.bind(this);
    this.assets = this.assets.bind(this);
    this.asset = this.asset.bind(this);
    this.reservedUsernames = this.reservedUsernames.bind(this);
    this.getChannelCollaborator = this.getChannelCollaborator.bind(this);
    this.getChannelCollaborators = this.getChannelCollaborators.bind(this);
    this.followersCount = this.followersCount.bind(this);
    this.followers = this.followers.bind(this);
  }

  isPaused = async (): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_paused: {}
    });
  };
  pausers = async (): Promise<ArrayOfString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pausers: {}
    });
  };
  channelDetails = async ({
    channelId
  }: {
    channelId: string;
  }): Promise<ChannelDetails> => {
    return this.client.queryContractSmart(this.contractAddress, {
      channel_details: {
        channel_id: channelId
      }
    });
  };
  channelMetadata = async ({
    channelId
  }: {
    channelId: string;
  }): Promise<ChannelMetadata> => {
    return this.client.queryContractSmart(this.contractAddress, {
      channel_metadata: {
        channel_id: channelId
      }
    });
  };
  channel = async ({
    channelId
  }: {
    channelId: string;
  }): Promise<ChannelResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      channel: {
        channel_id: channelId
      }
    });
  };
  channels = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfChannelResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      channels: {
        limit,
        start_after: startAfter
      }
    });
  };
  channelId = async ({
    userName
  }: {
    userName: string;
  }): Promise<String> => {
    return this.client.queryContractSmart(this.contractAddress, {
      channel_id: {
        user_name: userName
      }
    });
  };
  playlist = async ({
    channelId,
    playlistId
  }: {
    channelId: string;
    playlistId: string;
  }): Promise<Playlist> => {
    return this.client.queryContractSmart(this.contractAddress, {
      playlist: {
        channel_id: channelId,
        playlist_id: playlistId
      }
    });
  };
  playlists = async ({
    channelId,
    limit,
    startAfter
  }: {
    channelId: string;
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfPlaylist> => {
    return this.client.queryContractSmart(this.contractAddress, {
      playlists: {
        channel_id: channelId,
        limit,
        start_after: startAfter
      }
    });
  };
  config = async (): Promise<ChannelConractConfig> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  assets = async ({
    channelId,
    limit,
    startAfter
  }: {
    channelId: string;
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfAssetResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      assets: {
        channel_id: channelId,
        limit,
        start_after: startAfter
      }
    });
  };
  asset = async ({
    channelId,
    publishId
  }: {
    channelId: string;
    publishId: string;
  }): Promise<AssetResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      asset: {
        channel_id: channelId,
        publish_id: publishId
      }
    });
  };
  reservedUsernames = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfReservedUsername> => {
    return this.client.queryContractSmart(this.contractAddress, {
      reserved_usernames: {
        limit,
        start_after: startAfter
      }
    });
  };
  getChannelCollaborator = async ({
    channelId,
    collaboratorAddress
  }: {
    channelId: string;
    collaboratorAddress: Addr;
  }): Promise<CollaboratorInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_channel_collaborator: {
        channel_id: channelId,
        collaborator_address: collaboratorAddress
      }
    });
  };
  getChannelCollaborators = async ({
    channelId,
    limit,
    startAfter
  }: {
    channelId: string;
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfCollaboratorInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_channel_collaborators: {
        channel_id: channelId,
        limit,
        start_after: startAfter
      }
    });
  };
  followersCount = async ({
    channelId
  }: {
    channelId: string;
  }): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      followers_count: {
        channel_id: channelId
      }
    });
  };
  followers = async ({
    channelId,
    limit,
    startAfter
  }: {
    channelId: string;
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      followers: {
        channel_id: channelId,
        limit,
        start_after: startAfter
      }
    });
  };
}
export interface OmniFlixChannelInterface extends OmniFlixChannelReadOnlyInterface {
  contractAddress: string;
  sender: string;
  adminSetConfig: ({
    channelCreationFee,
    feeCollector,
    protocolAdmin
  }: {
    channelCreationFee?: Coin[];
    feeCollector?: string;
    protocolAdmin?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  adminRemoveAssets: ({
    assetKeys,
    refreshFlags
  }: {
    assetKeys: string[][];
    refreshFlags?: boolean;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  adminManageReservedUsernames: ({
    addUsernames,
    removeUsernames
  }: {
    addUsernames?: ReservedUsername[];
    removeUsernames?: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  pause: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  unpause: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setPausers: ({
    pausers
  }: {
    pausers: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  assetPublish: ({
    assetSource,
    channelId,
    isVisible,
    metadata,
    playlistId,
    salt
  }: {
    assetSource: AssetSource;
    channelId: string;
    isVisible: boolean;
    metadata: AssetMetadata;
    playlistId?: string;
    salt: Binary;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  assetUnpublish: ({
    channelId,
    publishId
  }: {
    channelId: string;
    publishId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  assetUpdateDetails: ({
    channelId,
    description,
    isVisible,
    mediaUri,
    name,
    publishId,
    thumbnailUri
  }: {
    channelId: string;
    description?: string;
    isVisible?: boolean;
    mediaUri?: string;
    name?: string;
    publishId: string;
    thumbnailUri?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  assetFlag: ({
    channelId,
    flag,
    interactiveVideoId,
    publishId
  }: {
    channelId: string;
    flag: Flag;
    interactiveVideoId?: string;
    publishId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  playlistCreate: ({
    channelId,
    playlistName
  }: {
    channelId: string;
    playlistName: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  playlistDelete: ({
    channelId,
    playlistId
  }: {
    channelId: string;
    playlistId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  playlistAddAsset: ({
    assetChannelId,
    channelId,
    playlistId,
    publishId
  }: {
    assetChannelId: string;
    channelId: string;
    playlistId: string;
    publishId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  playlistRemoveAsset: ({
    channelId,
    playlistId,
    publishId
  }: {
    channelId: string;
    playlistId: string;
    publishId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  playlistRefresh: ({
    channelId,
    playlistId
  }: {
    channelId: string;
    playlistId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  channelCreate: ({
    bannerPicture,
    channelName,
    description,
    paymentAddress,
    profilePicture,
    salt,
    userName
  }: {
    bannerPicture?: string;
    channelName: string;
    description?: string;
    paymentAddress: Addr;
    profilePicture?: string;
    salt: Binary;
    userName: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  channelDelete: ({
    channelId
  }: {
    channelId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  channelUpdateDetails: ({
    bannerPicture,
    channelId,
    channelName,
    description,
    paymentAddress,
    profilePicture
  }: {
    bannerPicture?: string;
    channelId: string;
    channelName?: string;
    description?: string;
    paymentAddress?: string;
    profilePicture?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  channelTip: ({
    amount,
    assetId,
    channelId
  }: {
    amount: Coin;
    assetId?: string;
    channelId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  channelAddCollaborator: ({
    channelId,
    collaboratorAddress,
    collaboratorDetails
  }: {
    channelId: string;
    collaboratorAddress: string;
    collaboratorDetails: ChannelCollaborator;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  channelRemoveCollaborator: ({
    channelId,
    collaboratorAddress
  }: {
    channelId: string;
    collaboratorAddress: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  channelFollow: ({
    channelId
  }: {
    channelId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  channelUnfollow: ({
    channelId
  }: {
    channelId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OmniFlixChannelClient extends OmniFlixChannelQueryClient implements OmniFlixChannelInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.adminSetConfig = this.adminSetConfig.bind(this);
    this.adminRemoveAssets = this.adminRemoveAssets.bind(this);
    this.adminManageReservedUsernames = this.adminManageReservedUsernames.bind(this);
    this.pause = this.pause.bind(this);
    this.unpause = this.unpause.bind(this);
    this.setPausers = this.setPausers.bind(this);
    this.assetPublish = this.assetPublish.bind(this);
    this.assetUnpublish = this.assetUnpublish.bind(this);
    this.assetUpdateDetails = this.assetUpdateDetails.bind(this);
    this.assetFlag = this.assetFlag.bind(this);
    this.playlistCreate = this.playlistCreate.bind(this);
    this.playlistDelete = this.playlistDelete.bind(this);
    this.playlistAddAsset = this.playlistAddAsset.bind(this);
    this.playlistRemoveAsset = this.playlistRemoveAsset.bind(this);
    this.playlistRefresh = this.playlistRefresh.bind(this);
    this.channelCreate = this.channelCreate.bind(this);
    this.channelDelete = this.channelDelete.bind(this);
    this.channelUpdateDetails = this.channelUpdateDetails.bind(this);
    this.channelTip = this.channelTip.bind(this);
    this.channelAddCollaborator = this.channelAddCollaborator.bind(this);
    this.channelRemoveCollaborator = this.channelRemoveCollaborator.bind(this);
    this.channelFollow = this.channelFollow.bind(this);
    this.channelUnfollow = this.channelUnfollow.bind(this);
  }

  adminSetConfig = async ({
    channelCreationFee,
    feeCollector,
    protocolAdmin
  }: {
    channelCreationFee?: Coin[];
    feeCollector?: string;
    protocolAdmin?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      admin_set_config: {
        channel_creation_fee: channelCreationFee,
        fee_collector: feeCollector,
        protocol_admin: protocolAdmin
      }
    }, fee, memo, _funds);
  };
  adminRemoveAssets = async ({
    assetKeys,
    refreshFlags
  }: {
    assetKeys: string[][];
    refreshFlags?: boolean;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      admin_remove_assets: {
        asset_keys: assetKeys,
        refresh_flags: refreshFlags
      }
    }, fee, memo, _funds);
  };
  adminManageReservedUsernames = async ({
    addUsernames,
    removeUsernames
  }: {
    addUsernames?: ReservedUsername[];
    removeUsernames?: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      admin_manage_reserved_usernames: {
        add_usernames: addUsernames,
        remove_usernames: removeUsernames
      }
    }, fee, memo, _funds);
  };
  pause = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      pause: {}
    }, fee, memo, _funds);
  };
  unpause = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unpause: {}
    }, fee, memo, _funds);
  };
  setPausers = async ({
    pausers
  }: {
    pausers: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_pausers: {
        pausers
      }
    }, fee, memo, _funds);
  };
  assetPublish = async ({
    assetSource,
    channelId,
    isVisible,
    metadata,
    playlistId,
    salt
  }: {
    assetSource: AssetSource;
    channelId: string;
    isVisible: boolean;
    metadata: AssetMetadata;
    playlistId?: string;
    salt: Binary;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      asset_publish: {
        asset_source: assetSource,
        channel_id: channelId,
        is_visible: isVisible,
        metadata,
        playlist_id: playlistId,
        salt
      }
    }, fee, memo, _funds);
  };
  assetUnpublish = async ({
    channelId,
    publishId
  }: {
    channelId: string;
    publishId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      asset_unpublish: {
        channel_id: channelId,
        publish_id: publishId
      }
    }, fee, memo, _funds);
  };
  assetUpdateDetails = async ({
    channelId,
    description,
    isVisible,
    mediaUri,
    name,
    publishId,
    thumbnailUri
  }: {
    channelId: string;
    description?: string;
    isVisible?: boolean;
    mediaUri?: string;
    name?: string;
    publishId: string;
    thumbnailUri?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      asset_update_details: {
        channel_id: channelId,
        description,
        is_visible: isVisible,
        media_uri: mediaUri,
        name,
        publish_id: publishId,
        thumbnail_uri: thumbnailUri
      }
    }, fee, memo, _funds);
  };
  assetFlag = async ({
    channelId,
    flag,
    interactiveVideoId,
    publishId
  }: {
    channelId: string;
    flag: Flag;
    interactiveVideoId?: string;
    publishId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      asset_flag: {
        channel_id: channelId,
        flag,
        interactive_video_id: interactiveVideoId,
        publish_id: publishId
      }
    }, fee, memo, _funds);
  };
  playlistCreate = async ({
    channelId,
    playlistName
  }: {
    channelId: string;
    playlistName: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      playlist_create: {
        channel_id: channelId,
        playlist_name: playlistName
      }
    }, fee, memo, _funds);
  };
  playlistDelete = async ({
    channelId,
    playlistId
  }: {
    channelId: string;
    playlistId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      playlist_delete: {
        channel_id: channelId,
        playlist_id: playlistId
      }
    }, fee, memo, _funds);
  };
  playlistAddAsset = async ({
    assetChannelId,
    channelId,
    playlistId,
    publishId
  }: {
    assetChannelId: string;
    channelId: string;
    playlistId: string;
    publishId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      playlist_add_asset: {
        asset_channel_id: assetChannelId,
        channel_id: channelId,
        playlist_id: playlistId,
        publish_id: publishId
      }
    }, fee, memo, _funds);
  };
  playlistRemoveAsset = async ({
    channelId,
    playlistId,
    publishId
  }: {
    channelId: string;
    playlistId: string;
    publishId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      playlist_remove_asset: {
        channel_id: channelId,
        playlist_id: playlistId,
        publish_id: publishId
      }
    }, fee, memo, _funds);
  };
  playlistRefresh = async ({
    channelId,
    playlistId
  }: {
    channelId: string;
    playlistId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      playlist_refresh: {
        channel_id: channelId,
        playlist_id: playlistId
      }
    }, fee, memo, _funds);
  };
  channelCreate = async ({
    bannerPicture,
    channelName,
    description,
    paymentAddress,
    profilePicture,
    salt,
    userName
  }: {
    bannerPicture?: string;
    channelName: string;
    description?: string;
    paymentAddress: Addr;
    profilePicture?: string;
    salt: Binary;
    userName: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      channel_create: {
        banner_picture: bannerPicture,
        channel_name: channelName,
        description,
        payment_address: paymentAddress,
        profile_picture: profilePicture,
        salt,
        user_name: userName
      }
    }, fee, memo, _funds);
  };
  channelDelete = async ({
    channelId
  }: {
    channelId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      channel_delete: {
        channel_id: channelId
      }
    }, fee, memo, _funds);
  };
  channelUpdateDetails = async ({
    bannerPicture,
    channelId,
    channelName,
    description,
    paymentAddress,
    profilePicture
  }: {
    bannerPicture?: string;
    channelId: string;
    channelName?: string;
    description?: string;
    paymentAddress?: string;
    profilePicture?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      channel_update_details: {
        banner_picture: bannerPicture,
        channel_id: channelId,
        channel_name: channelName,
        description,
        payment_address: paymentAddress,
        profile_picture: profilePicture
      }
    }, fee, memo, _funds);
  };
  channelTip = async ({
    amount,
    assetId,
    channelId
  }: {
    amount: Coin;
    assetId?: string;
    channelId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      channel_tip: {
        amount,
        asset_id: assetId,
        channel_id: channelId
      }
    }, fee, memo, _funds);
  };
  channelAddCollaborator = async ({
    channelId,
    collaboratorAddress,
    collaboratorDetails
  }: {
    channelId: string;
    collaboratorAddress: string;
    collaboratorDetails: ChannelCollaborator;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      channel_add_collaborator: {
        channel_id: channelId,
        collaborator_address: collaboratorAddress,
        collaborator_details: collaboratorDetails
      }
    }, fee, memo, _funds);
  };
  channelRemoveCollaborator = async ({
    channelId,
    collaboratorAddress
  }: {
    channelId: string;
    collaboratorAddress: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      channel_remove_collaborator: {
        channel_id: channelId,
        collaborator_address: collaboratorAddress
      }
    }, fee, memo, _funds);
  };
  channelFollow = async ({
    channelId
  }: {
    channelId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      channel_follow: {
        channel_id: channelId
      }
    }, fee, memo, _funds);
  };
  channelUnfollow = async ({
    channelId
  }: {
    channelId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      channel_unfollow: {
        channel_id: channelId
      }
    }, fee, memo, _funds);
  };
}