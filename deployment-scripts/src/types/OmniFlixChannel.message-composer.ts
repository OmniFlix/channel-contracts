/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Uint128, Addr, InstantiateMsg, Coin, ChannelTokenDetails, ChannelsCollectionDetails, ReservedUsername, ExecuteMsg, AssetSource, Binary, Flag, Role, Decimal, AssetMetadata, ChannelCollaborator, QueryMsg, AssetResponse, Asset, FlagInfo, ArrayOfAssetResponse, ChannelResponse, CollaboratorInfo, ChannelDetails, String, ChannelMetadata, ArrayOfChannelResponse, ChannelConractConfig, AuthDetails, ArrayOfString, Uint64, ArrayOfCollaboratorInfo, Boolean, Playlist, ArrayOfPlaylist, ArrayOfReservedUsername } from "./OmniFlixChannel.types";
export interface OmniFlixChannelMsg {
  contractAddress: string;
  sender: string;
  adminSetConfig: ({
    channelCreationFee,
    feeCollector,
    protocolAdmin
  }: {
    channelCreationFee?: Coin[];
    feeCollector?: string;
    protocolAdmin?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  adminRemoveAssets: ({
    assetKeys,
    refreshFlags
  }: {
    assetKeys: string[][];
    refreshFlags?: boolean;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  adminManageReservedUsernames: ({
    addUsernames,
    removeUsernames
  }: {
    addUsernames?: ReservedUsername[];
    removeUsernames?: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  pause: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unpause: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setPausers: ({
    pausers
  }: {
    pausers: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  assetPublish: ({
    assetSource,
    channelId,
    isVisible,
    metadata,
    playlistName,
    salt
  }: {
    assetSource: AssetSource;
    channelId: string;
    isVisible: boolean;
    metadata: AssetMetadata;
    playlistName?: string;
    salt: Binary;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  assetUnpublish: ({
    channelId,
    publishId
  }: {
    channelId: string;
    publishId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  assetUpdateDetails: ({
    channelId,
    description,
    isVisible,
    mediaUri,
    name,
    publishId,
    thumbnailUri
  }: {
    channelId: string;
    description?: string;
    isVisible?: boolean;
    mediaUri?: string;
    name?: string;
    publishId: string;
    thumbnailUri?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  assetFlag: ({
    channelId,
    flag,
    interactiveVideoId,
    publishId
  }: {
    channelId: string;
    flag: Flag;
    interactiveVideoId?: string;
    publishId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  playlistCreate: ({
    channelId,
    playlistName
  }: {
    channelId: string;
    playlistName: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  playlistDelete: ({
    channelId,
    playlistName
  }: {
    channelId: string;
    playlistName: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  playlistAddAsset: ({
    assetChannelId,
    channelId,
    playlistName,
    publishId
  }: {
    assetChannelId: string;
    channelId: string;
    playlistName: string;
    publishId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  playlistRemoveAsset: ({
    channelId,
    playlistName,
    publishId
  }: {
    channelId: string;
    playlistName: string;
    publishId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  playlistRefresh: ({
    channelId,
    playlistName
  }: {
    channelId: string;
    playlistName: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  channelCreate: ({
    bannerPicture,
    channelName,
    description,
    paymentAddress,
    profilePicture,
    salt,
    userName
  }: {
    bannerPicture?: string;
    channelName: string;
    description?: string;
    paymentAddress: Addr;
    profilePicture?: string;
    salt: Binary;
    userName: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  channelDelete: ({
    channelId
  }: {
    channelId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  channelUpdateDetails: ({
    bannerPicture,
    channelId,
    channelName,
    description,
    paymentAddress,
    profilePicture
  }: {
    bannerPicture?: string;
    channelId: string;
    channelName?: string;
    description?: string;
    paymentAddress?: string;
    profilePicture?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  channelTip: ({
    amount,
    assetId,
    channelId
  }: {
    amount: Coin;
    assetId?: string;
    channelId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  channelAddCollaborator: ({
    channelId,
    collaboratorAddress,
    collaboratorDetails
  }: {
    channelId: string;
    collaboratorAddress: string;
    collaboratorDetails: ChannelCollaborator;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  channelRemoveCollaborator: ({
    channelId,
    collaboratorAddress
  }: {
    channelId: string;
    collaboratorAddress: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  channelFollow: ({
    channelId
  }: {
    channelId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  channelUnfollow: ({
    channelId
  }: {
    channelId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class OmniFlixChannelMsgComposer implements OmniFlixChannelMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.adminSetConfig = this.adminSetConfig.bind(this);
    this.adminRemoveAssets = this.adminRemoveAssets.bind(this);
    this.adminManageReservedUsernames = this.adminManageReservedUsernames.bind(this);
    this.pause = this.pause.bind(this);
    this.unpause = this.unpause.bind(this);
    this.setPausers = this.setPausers.bind(this);
    this.assetPublish = this.assetPublish.bind(this);
    this.assetUnpublish = this.assetUnpublish.bind(this);
    this.assetUpdateDetails = this.assetUpdateDetails.bind(this);
    this.assetFlag = this.assetFlag.bind(this);
    this.playlistCreate = this.playlistCreate.bind(this);
    this.playlistDelete = this.playlistDelete.bind(this);
    this.playlistAddAsset = this.playlistAddAsset.bind(this);
    this.playlistRemoveAsset = this.playlistRemoveAsset.bind(this);
    this.playlistRefresh = this.playlistRefresh.bind(this);
    this.channelCreate = this.channelCreate.bind(this);
    this.channelDelete = this.channelDelete.bind(this);
    this.channelUpdateDetails = this.channelUpdateDetails.bind(this);
    this.channelTip = this.channelTip.bind(this);
    this.channelAddCollaborator = this.channelAddCollaborator.bind(this);
    this.channelRemoveCollaborator = this.channelRemoveCollaborator.bind(this);
    this.channelFollow = this.channelFollow.bind(this);
    this.channelUnfollow = this.channelUnfollow.bind(this);
  }

  adminSetConfig = ({
    channelCreationFee,
    feeCollector,
    protocolAdmin
  }: {
    channelCreationFee?: Coin[];
    feeCollector?: string;
    protocolAdmin?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          admin_set_config: {
            channel_creation_fee: channelCreationFee,
            fee_collector: feeCollector,
            protocol_admin: protocolAdmin
          }
        })),
        funds: _funds
      })
    };
  };
  adminRemoveAssets = ({
    assetKeys,
    refreshFlags
  }: {
    assetKeys: string[][];
    refreshFlags?: boolean;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          admin_remove_assets: {
            asset_keys: assetKeys,
            refresh_flags: refreshFlags
          }
        })),
        funds: _funds
      })
    };
  };
  adminManageReservedUsernames = ({
    addUsernames,
    removeUsernames
  }: {
    addUsernames?: ReservedUsername[];
    removeUsernames?: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          admin_manage_reserved_usernames: {
            add_usernames: addUsernames,
            remove_usernames: removeUsernames
          }
        })),
        funds: _funds
      })
    };
  };
  pause = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          pause: {}
        })),
        funds: _funds
      })
    };
  };
  unpause = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unpause: {}
        })),
        funds: _funds
      })
    };
  };
  setPausers = ({
    pausers
  }: {
    pausers: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_pausers: {
            pausers
          }
        })),
        funds: _funds
      })
    };
  };
  assetPublish = ({
    assetSource,
    channelId,
    isVisible,
    metadata,
    playlistName,
    salt
  }: {
    assetSource: AssetSource;
    channelId: string;
    isVisible: boolean;
    metadata: AssetMetadata;
    playlistName?: string;
    salt: Binary;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          asset_publish: {
            asset_source: assetSource,
            channel_id: channelId,
            is_visible: isVisible,
            metadata,
            playlist_name: playlistName,
            salt
          }
        })),
        funds: _funds
      })
    };
  };
  assetUnpublish = ({
    channelId,
    publishId
  }: {
    channelId: string;
    publishId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          asset_unpublish: {
            channel_id: channelId,
            publish_id: publishId
          }
        })),
        funds: _funds
      })
    };
  };
  assetUpdateDetails = ({
    channelId,
    description,
    isVisible,
    mediaUri,
    name,
    publishId,
    thumbnailUri
  }: {
    channelId: string;
    description?: string;
    isVisible?: boolean;
    mediaUri?: string;
    name?: string;
    publishId: string;
    thumbnailUri?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          asset_update_details: {
            channel_id: channelId,
            description,
            is_visible: isVisible,
            media_uri: mediaUri,
            name,
            publish_id: publishId,
            thumbnail_uri: thumbnailUri
          }
        })),
        funds: _funds
      })
    };
  };
  assetFlag = ({
    channelId,
    flag,
    interactiveVideoId,
    publishId
  }: {
    channelId: string;
    flag: Flag;
    interactiveVideoId?: string;
    publishId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          asset_flag: {
            channel_id: channelId,
            flag,
            interactive_video_id: interactiveVideoId,
            publish_id: publishId
          }
        })),
        funds: _funds
      })
    };
  };
  playlistCreate = ({
    channelId,
    playlistName
  }: {
    channelId: string;
    playlistName: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          playlist_create: {
            channel_id: channelId,
            playlist_name: playlistName
          }
        })),
        funds: _funds
      })
    };
  };
  playlistDelete = ({
    channelId,
    playlistName
  }: {
    channelId: string;
    playlistName: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          playlist_delete: {
            channel_id: channelId,
            playlist_name: playlistName
          }
        })),
        funds: _funds
      })
    };
  };
  playlistAddAsset = ({
    assetChannelId,
    channelId,
    playlistName,
    publishId
  }: {
    assetChannelId: string;
    channelId: string;
    playlistName: string;
    publishId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          playlist_add_asset: {
            asset_channel_id: assetChannelId,
            channel_id: channelId,
            playlist_name: playlistName,
            publish_id: publishId
          }
        })),
        funds: _funds
      })
    };
  };
  playlistRemoveAsset = ({
    channelId,
    playlistName,
    publishId
  }: {
    channelId: string;
    playlistName: string;
    publishId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          playlist_remove_asset: {
            channel_id: channelId,
            playlist_name: playlistName,
            publish_id: publishId
          }
        })),
        funds: _funds
      })
    };
  };
  playlistRefresh = ({
    channelId,
    playlistName
  }: {
    channelId: string;
    playlistName: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          playlist_refresh: {
            channel_id: channelId,
            playlist_name: playlistName
          }
        })),
        funds: _funds
      })
    };
  };
  channelCreate = ({
    bannerPicture,
    channelName,
    description,
    paymentAddress,
    profilePicture,
    salt,
    userName
  }: {
    bannerPicture?: string;
    channelName: string;
    description?: string;
    paymentAddress: Addr;
    profilePicture?: string;
    salt: Binary;
    userName: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          channel_create: {
            banner_picture: bannerPicture,
            channel_name: channelName,
            description,
            payment_address: paymentAddress,
            profile_picture: profilePicture,
            salt,
            user_name: userName
          }
        })),
        funds: _funds
      })
    };
  };
  channelDelete = ({
    channelId
  }: {
    channelId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          channel_delete: {
            channel_id: channelId
          }
        })),
        funds: _funds
      })
    };
  };
  channelUpdateDetails = ({
    bannerPicture,
    channelId,
    channelName,
    description,
    paymentAddress,
    profilePicture
  }: {
    bannerPicture?: string;
    channelId: string;
    channelName?: string;
    description?: string;
    paymentAddress?: string;
    profilePicture?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          channel_update_details: {
            banner_picture: bannerPicture,
            channel_id: channelId,
            channel_name: channelName,
            description,
            payment_address: paymentAddress,
            profile_picture: profilePicture
          }
        })),
        funds: _funds
      })
    };
  };
  channelTip = ({
    amount,
    assetId,
    channelId
  }: {
    amount: Coin;
    assetId?: string;
    channelId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          channel_tip: {
            amount,
            asset_id: assetId,
            channel_id: channelId
          }
        })),
        funds: _funds
      })
    };
  };
  channelAddCollaborator = ({
    channelId,
    collaboratorAddress,
    collaboratorDetails
  }: {
    channelId: string;
    collaboratorAddress: string;
    collaboratorDetails: ChannelCollaborator;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          channel_add_collaborator: {
            channel_id: channelId,
            collaborator_address: collaboratorAddress,
            collaborator_details: collaboratorDetails
          }
        })),
        funds: _funds
      })
    };
  };
  channelRemoveCollaborator = ({
    channelId,
    collaboratorAddress
  }: {
    channelId: string;
    collaboratorAddress: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          channel_remove_collaborator: {
            channel_id: channelId,
            collaborator_address: collaboratorAddress
          }
        })),
        funds: _funds
      })
    };
  };
  channelFollow = ({
    channelId
  }: {
    channelId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          channel_follow: {
            channel_id: channelId
          }
        })),
        funds: _funds
      })
    };
  };
  channelUnfollow = ({
    channelId
  }: {
    channelId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          channel_unfollow: {
            channel_id: channelId
          }
        })),
        funds: _funds
      })
    };
  };
}