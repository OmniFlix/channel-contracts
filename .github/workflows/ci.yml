name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'release/**' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ created ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Run tests
        run: cargo test --verbose
        
      - name: Run clippy
        run: cargo clippy -- -D warnings
        
      - name: Check formatting
        run: cargo fmt -- --check

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Build optimized WASM
        run: |
          RUSTFLAGS='-C link-arg=-s' cargo wasm
          cp target/wasm32-unknown-unknown/release/omniflix_channel.wasm artifacts/
          
      - name: Generate checksum
        run: |
          cd artifacts
          sha256sum omniflix_channel.wasm > checksums.txt
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wasm-artifacts
          path: artifacts/
          
  deploy-testnet:
    needs: build
    if: startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: wasm-artifacts
          path: artifacts
          
      - name: Deploy to testnet
        run: |
          # Add your testnet deployment commands here
          # Example:
          # omniflixhubd tx wasm store artifacts/omniflix_channel.wasm --from <key> --chain-id <testnet-chain-id>
          
  deploy-mainnet:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: wasm-artifacts
          path: artifacts
          
      - name: Deploy to mainnet
        run: |
          # Add your mainnet deployment commands here
          # Example:
          # omniflixhubd tx wasm store artifacts/omniflix_channel.wasm --from <key> --chain-id <mainnet-chain-id>
          
  create-release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: wasm-artifacts
          path: artifacts
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/omniflix_channel.wasm
            artifacts/checksums.txt
          generate_release_notes: true 