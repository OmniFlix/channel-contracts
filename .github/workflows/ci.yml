name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'release/**' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ created ]

env:
  OPTIMIZER_VERSION: "0.16.0"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.76.0
          target: wasm32-unknown-unknown
          override: true

      - name: Run unit tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --locked
        env:
          RUST_BACKTRACE: 1

  lint:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.76.0
          override: true
          components: clippy

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.76.0
          override: true
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  schema:
    name: Schema Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.6.0'

      - name: Generate Schema
        run: ./schema.sh
        working-directory: scripts

      - name: Show Schema Changes
        run: git status --porcelain

      - name: Check Schema Changes
        run: test -z "$(git status --porcelain)"

  build:
    needs: [test, lint, fmt, schema]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.76.0
          target: wasm32-unknown-unknown
          override: true

      - name: Compile WASM contract
        uses: actions-rs/cargo@v1
        with:
          command: wasm
          args: --locked
        env:
          RUSTFLAGS: "-C link-arg=-s"

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Run optimizer
        run: |
          docker run --rm -v "$(pwd):/code" \
            --mount type=volume,source="$(basename "$(pwd)")_cache",target=/code/target \
            --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry \
            cosmwasm/optimizer:${{ env.OPTIMIZER_VERSION }} ./contracts/omniflix-channel

      - name: Generate checksum
        run: |
          sha256sum artifacts/omniflix_channel.wasm > artifacts/checksums.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wasm-artifacts
          path: artifacts/
          retention-days: 5

  deploy-testnet:
    needs: build
    if: startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: wasm-artifacts
          path: artifacts
          
      - name: Deploy to testnet
        run: |
          # Add your testnet deployment commands here
          # Example:
          # omniflixhubd tx wasm store artifacts/omniflix_channel.wasm --from <key> --chain-id <testnet-chain-id>
          
  deploy-mainnet:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: wasm-artifacts
          path: artifacts
          
      - name: Deploy to mainnet
        run: |
          # Add your mainnet deployment commands here
          # Example:
          # omniflixhubd tx wasm store artifacts/omniflix_channel.wasm --from <key> --chain-id <mainnet-chain-id>
          
  create-release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: wasm-artifacts
          path: artifacts
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/omniflix_channel.wasm
            artifacts/checksums.txt
          generate_release_notes: true 